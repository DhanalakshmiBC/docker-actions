name: docker image scan with trivy
on: 
    push:
        branches:
            - master
    pull_request:
           branches:
            - master
jobs:
    sonarqube-scan:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: SonarQube Scan
          uses: SonarSource/sonarqube-scan-action@v5
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    deploy:
        runs-on: ubuntu-latest
        needs: sonarqube-scan
        permissions:
            contents: read
            packages: write
            security-events: write
        steps:
        - uses: actions/checkout@v3

        - name: logout
          run: docker logout
             

        - name: Login to Docker Hub
          run: docker logout

        - name: push to docker hub
          run: |
            docker build -t dhanalakshmi89/${{github.run_number}}:${{github.sha}} .
            echo  ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker push dhanalakshmi89/${{github.run_number}}:${{github.sha}}

    
    scan-with-trivy:
        runs-on: ubuntu-latest
        needs: deploy
        steps:  
        - uses: actions/checkout@v3

        - name: set the date
          id: set-data
          run: echo "DATE=$(date +%m.%d.%Y)" >> $GITHUB_ENV

        - name: create output directory
          run: mkdir -p "GIT-Actions/Trivy-automation"

        - name: Install Trivy
          run: |
            sudo apt-get update
            sudo apt-get install -y curl
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin v0.57.0

        - name: Login to docker
          run: echo ${{ secrets.DOCKER_PASSWORD}} | docker login -u ${{secrets.DOCKER_USERNAME}} --password-stdin

        - name: Download Trivy vulnerability scanner
          run: trivy image --download-db-only

        - name: Run trivy vulnerability scanner
          run: |
            OUTPUT_FILE="GIT-Actions/Trivy-automation/scan-results-${DATE}.json"
            mkdir -p "GIT-Actions/Trivy-automation"
            trivy image --format json --ignore-unfixed --vuln-type os,library --severity CRITICAL,HIGH,MEDIUM,LOW -o "$OUTPUT_FILE" dhanalakshmi89/${{github.run_number}}:${{github.sha}}

        - name: Verify scan results exist
          run: ls -l "GIT-Actions/Trivy-automation"

        - name: Commit scan results to repository
          env:
            GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
             git config --global user.name "DhanalakshmiBC"
             git config --global user.email "dhanalakshmi.bc@gmail.com"
             git add "GIT-Actions/Trivy-automation/scan-results-${DATE}.json"
             git commit -m "ADD trivy scan results (${DATE})"
             git push origin HEAD:master || echo "No changes to commit"

    push-image-to-ecr:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3
        - name: login to ecr
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
         
        - name: Get commit hash
          id: get-commit-hash
          run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
        - name: Get timestamp
          id: get-timestamp
          run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"
        
        - name: Build, tag, and push the image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
            IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            echo  ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG